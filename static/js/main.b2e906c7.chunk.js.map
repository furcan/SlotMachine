{"version":3,"sources":["application/helpers/index.ts","application/redux/actions/slotActions.ts","application/redux/reducers/slotReducer.ts","application/redux/reducers/index.ts","presentation/components/header/Header.tsx","presentation/components/footer/Footer.tsx","presentation/components/layout/Layout.tsx","presentation/components/welcome/Welcome.tsx","application/enumerations/reels/index.ts","presentation/components/game/partials/reel/Reel.tsx","presentation/components/game/partials/machine/Machine.tsx","presentation/components/game/Game.tsx","presentation/App.tsx","index.tsx"],"names":["addSomeDelayAsync","milliseconds","Promise","resolve","setTimeout","elementScrollToWithDurationAsync","element","to","duration","a","start","scrollTop","diff","currentTime","animatedScroll","crrntTm","strt","dff","currentPosition","delay","clearTimeout","generateRandomNumberBetween","from","Math","floor","random","rdxSlotActionTypes","slotIsSpinning","toggle","type","actionIsSpinning","slotHasEnded","actionHasEnded","slotLuckyLines","lines","actionLuckyLines","slotLuckyNumbers","numbers","actionLuckyNumbers","slotAchievements","achievements","actionAchievements","rdxSlotHasEndedAsync","dispatch","rdxSlotLuckyLinesAsync","rdxSlotLuckyNumbersAsync","rdxSlotAchievementsAsync","rdxSlotSelector","state","slotReducer","slotInitialState","stateSlotIsWelcome","stateSlotIsSpinning","stateSlotSpinningHasEnded","stateSlotData","Array","fill","flat","stateSlotAchievements","lineTopAchievements","lineCenterAchievements","lineBottomAchievements","reelLeftVisibleIndexes","top","center","bottom","reelCenterVisibleIndexes","reelRightVisibleIndexes","stateSlotLuckyLines","left","right","stateSlotLuckyNumbers","appReducers","combineReducers","action","Header","className","Footer","Layout","children","Welcome","EReelsPositions","useDispatch","onClick","mapReelsPositions","Map","LEFT","CENTER","RIGHT","Reel","enumeration","classNamePrefix","slotData","refReel","refsSymbol","achievedIndexes","position","hasEnded","get","ref","map","symbol","index","classNameTop","classNameCenter","classNameBottom","_this","current","join","trim","Machine","useSelector","refReelLeft","useRef","refReelCenter","refReelRight","refsSymbolsLeft","refsSymbolsCenter","refsSymbolsRight","spinHandlerAsync","luckyNum1","luckyNum2","luckyNum3","scrollTo","symbolLeft","symbolCenter","symbolRight","reelLeft","reelCenter","reelRight","positionLeft","offsetTop","offsetHeight","positionCenter","positionRight","all","topLineSymbol1","topLineSymbol2","topLineSymbol3","centerLineSymbol1","centerLineSymbol2","centerLineSymbol3","bottomLineSymbol1","bottomLineSymbol2","bottomLineSymbol3","dataset","achievement","Game","App","SlotMachineApp","store","createStore","composeWithDevTools","applyMiddleware","thunk","StrictMode","slotMachineRootElement","window","document","getElementById","hasChildNodes","hydrate","render"],"mappings":"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","file":"static/js/main.b2e906c7.chunk.js","sourcesContent":["const addSomeDelayAsync = (milliseconds?: number): Promise<void> => new Promise(resolve => setTimeout(() => { resolve(); }, milliseconds || 1000));\n\nconst elementScrollToWithDurationAsync = async (element: HTMLElement, to: number, duration: number): Promise<void> => new Promise(resolve => {\n  const start = element.scrollTop;\n  const diff = to - start;\n  const increment = 10;\n  let currentTime = 0;\n\n  const easeInOutQuad = (crrntTm: number, strt: number, dff: number, drtn: number): number => {\n    crrntTm /= drtn / 2;\n    if (crrntTm < 1) {\n      return dff / 2 * crrntTm * crrntTm + strt;\n    }\n    crrntTm--;\n    return -dff / 2 * (crrntTm * (crrntTm - 2) - 1) + strt;\n  };\n\n  const animatedScroll = () => {\n    currentTime += increment;\n    const currentPosition = easeInOutQuad(currentTime, start, diff, duration);\n    element.scrollTop = currentPosition;\n    if (currentTime < duration) {\n      const delay = setTimeout(() => {\n        animatedScroll();\n        clearTimeout(delay);\n      }, increment);\n    } else {\n      resolve();\n    }\n  };\n\n  animatedScroll();\n});\n\nconst generateRandomNumberBetween = (from: number, to: number): number => Math.floor(Math.random() * (to + 1)) + from;\n\nexport {\n  addSomeDelayAsync,\n  elementScrollToWithDurationAsync,\n  generateRandomNumberBetween,\n};\n","import { addSomeDelayAsync } from 'application/helpers';\n\nimport {\n  Dispatch,\n  IReduxSlotDispatch,\n  IReduxSlotState,\n  IReduxSlotLuckyLines,\n  IReduxSlotLuckyNumbers,\n  IReduxSlotAchievements,\n  IReduxSlotActionTypes,\n  IReduxSlotActions,\n} from 'application/redux';\n\nconst rdxSlotActionTypes: IReduxSlotActionTypes = {\n  SLOT_WELLCOME: 'SLOT_START',\n  SLOT_START: 'SLOT_START',\n  SLOT_RESTART: 'SLOT_RESTART',\n  SLOT_ISSPINNING: 'SLOT_ISSPINNING',\n  SLOT_SPINNINGHASENDED: 'SLOT_SPINNINGHASENDED',\n  SLOT_LUCKYLINES: 'SLOT_LUCKYLINES',\n  SLOT_LUCKYNUMBERS: 'SLOT_LUCKYNUMBERS',\n  SLOT_ACHIEVEMENTS: 'SLOT_ACHIEVEMENTS',\n};\n\nconst slotWelcome = (): IReduxSlotActions => ({\n  type: rdxSlotActionTypes.SLOT_WELLCOME,\n});\n\nconst slotStart = (): IReduxSlotActions => ({\n  type: rdxSlotActionTypes.SLOT_RESTART,\n});\n\nconst slotRestart = (): IReduxSlotActions => ({\n  type: rdxSlotActionTypes.SLOT_RESTART,\n});\n\nconst slotIsSpinning = (toggle: boolean): IReduxSlotActions => ({\n  type: rdxSlotActionTypes.SLOT_ISSPINNING,\n  actionIsSpinning: toggle,\n});\n\nconst slotHasEnded = (toggle: boolean): IReduxSlotActions => ({\n  type: rdxSlotActionTypes.SLOT_SPINNINGHASENDED,\n  actionHasEnded: toggle,\n});\n\nconst slotLuckyLines = (lines: IReduxSlotLuckyLines): IReduxSlotActions => ({\n  type: rdxSlotActionTypes.SLOT_LUCKYLINES,\n  actionLuckyLines: lines,\n});\n\nconst slotLuckyNumbers = (numbers: IReduxSlotLuckyNumbers): IReduxSlotActions => ({\n  type: rdxSlotActionTypes.SLOT_LUCKYNUMBERS,\n  actionLuckyNumbers: numbers,\n});\n\nconst slotAchievements = (achievements: IReduxSlotAchievements): IReduxSlotActions => ({\n  type: rdxSlotActionTypes.SLOT_ACHIEVEMENTS,\n  actionAchievements: achievements,\n});\n\n\nconst rdxSlotWelcomeAsync = (): IReduxSlotDispatch => async (dispatch: Dispatch<IReduxSlotActions>) => {\n  dispatch(slotWelcome());\n};\n\nconst rdxSlotStartAsync = (): IReduxSlotDispatch => async (dispatch: Dispatch<IReduxSlotActions>) => {\n  dispatch(slotStart());\n};\n\nconst rdxSlotRestartAsync = (): IReduxSlotDispatch => async (dispatch: Dispatch<IReduxSlotActions>) => {\n  dispatch(slotRestart());\n};\n\nconst rdxSlotIsSpinningAsync = (): IReduxSlotDispatch => async (dispatch: Dispatch<IReduxSlotActions>) => {\n  dispatch(slotIsSpinning(true));\n  await addSomeDelayAsync(1000); // todo: 2000 - 500 - 500\n  dispatch(slotIsSpinning(false));\n};\n\nconst rdxSlotHasEndedAsync = (toggle: boolean): IReduxSlotDispatch => async (dispatch: Dispatch<IReduxSlotActions>) => {\n  dispatch(slotHasEnded(toggle));\n};\n\nconst rdxSlotLuckyLinesAsync = (lines: IReduxSlotLuckyLines): IReduxSlotDispatch => async (dispatch: Dispatch<IReduxSlotActions>) => {\n  dispatch(slotLuckyLines(lines));\n};\n\nconst rdxSlotLuckyNumbersAsync = (numbers: IReduxSlotLuckyNumbers): IReduxSlotDispatch => async (dispatch: Dispatch<IReduxSlotActions>) => {\n  dispatch(slotLuckyNumbers(numbers));\n};\n\nconst rdxSlotAchievementsAsync = (achievements: IReduxSlotAchievements): IReduxSlotDispatch => async (dispatch: Dispatch<IReduxSlotActions>) => {\n  dispatch(slotAchievements(achievements));\n};\n\nconst rdxSlotSelector = (state: IReduxSlotState): IReduxSlotState => state.slotReducer;\n\nexport {\n  rdxSlotActionTypes,\n  rdxSlotWelcomeAsync,\n  rdxSlotStartAsync,\n  rdxSlotRestartAsync,\n  rdxSlotIsSpinningAsync,\n  rdxSlotHasEndedAsync,\n  rdxSlotLuckyLinesAsync,\n  rdxSlotLuckyNumbersAsync,\n  rdxSlotAchievementsAsync,\n  rdxSlotSelector,\n};\n","\nimport { generateRandomNumberBetween } from 'application/helpers';\n\nimport { IReduxSlotActions, IReduxSlotState, rdxSlotActionTypes } from 'application/redux';\n\nconst slotInitialState: IReduxSlotState = {\n  stateSlotIsWelcome: false, // TODO: will be true after dev\n  stateSlotIsSpinning: false,\n  stateSlotSpinningHasEnded: false,\n  stateSlotData: Array(20).fill(['symbol1', 'symbol2', 'symbol3', 'symbol4', 'symbol5']).flat(), // TODO:\n  stateSlotAchievements: {\n    lineTopAchievements: '',\n    lineCenterAchievements: '',\n    lineBottomAchievements: '',\n    reelLeftVisibleIndexes: {\n      top: 0,\n      center: 0,\n      bottom: 0,\n    },\n    reelCenterVisibleIndexes: {\n      top: 0,\n      center: 0,\n      bottom: 0,\n    },\n    reelRightVisibleIndexes: {\n      top: 0,\n      center: 0,\n      bottom: 0,\n    },\n  },\n  stateSlotLuckyLines: {\n    // TODO: will be enum => 0 => top || random\n    // TODO: will be enum => 1 => center || random\n    // TODO: will be enum => 2 => bottom || random\n    // left: generateRandomNumberBetween(0, 2),\n    // center: generateRandomNumberBetween(0, 2),\n    // right: generateRandomNumberBetween(0, 2),\n    left: 1,\n    center: 1,\n    right: 1,\n  },\n  stateSlotLuckyNumbers: {\n    left: generateRandomNumberBetween(6, 94),\n    center: generateRandomNumberBetween(6, 94),\n    right: generateRandomNumberBetween(6, 94),\n  },\n};\n\n/* eslint-disable indent */\nconst slotReducer = (state = slotInitialState, action: IReduxSlotActions): IReduxSlotState => {\n  switch (action.type) {\n    case rdxSlotActionTypes.SLOT_WELLCOME:\n      return slotInitialState;\n\n    case rdxSlotActionTypes.SLOT_START:\n      return {\n        ...slotInitialState,\n        stateSlotIsWelcome: false,\n      };\n\n    case rdxSlotActionTypes.SLOT_RESTART:\n      return {\n        ...slotInitialState,\n        stateSlotIsWelcome: false,\n      };\n\n    case rdxSlotActionTypes.SLOT_ISSPINNING:\n      return {\n        ...state,\n        stateSlotIsSpinning: action.actionIsSpinning === true,\n      };\n\n    case rdxSlotActionTypes.SLOT_SPINNINGHASENDED:\n      return {\n        ...state,\n        stateSlotSpinningHasEnded: action.actionHasEnded === true,\n      };\n\n    case rdxSlotActionTypes.SLOT_LUCKYLINES:\n      return {\n        ...state,\n        stateSlotLuckyLines: action.actionLuckyLines || slotInitialState.stateSlotLuckyLines,\n      };\n\n    case rdxSlotActionTypes.SLOT_LUCKYNUMBERS:\n      return {\n        ...state,\n        stateSlotLuckyNumbers: action.actionLuckyNumbers || slotInitialState.stateSlotLuckyNumbers,\n      };\n\n    case rdxSlotActionTypes.SLOT_ACHIEVEMENTS:\n      return {\n        ...state,\n        stateSlotAchievements: action.actionAchievements || slotInitialState.stateSlotAchievements,\n      };\n\n    default:\n      return state;\n  }\n};\n/* eslint-enable indent */\n\nexport {\n  slotInitialState,\n  slotReducer,\n};\n","import { combineReducers } from 'redux';\n\nimport { slotReducer } from 'application/redux/reducers/slotReducer';\n\nconst appReducers = combineReducers({\n  slotReducer,\n});\n\nexport { appReducers };\n","import 'presentation/components/header/Header.scss';\n\nfunction Header(): JSX.Element {\n  return (\n    <header className=\"header\">\n      <div className=\"header__container\">\n        <h1>HEADER</h1>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import 'presentation/components/footer/Footer.scss';\n\nfunction Footer(): JSX.Element {\n  return (\n    <footer className=\"footer\">\n      <div className=\"footer__container\">\n        <div className=\"footer__copyright\">\n          <p className=\"footer__copyright__text\">copyright text</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import Header from 'presentation/components/header/Header';\nimport Footer from 'presentation/components/footer/Footer';\n\nimport 'presentation/components/layout/Layout.scss';\n\ntype TChildren = React.ReactNode\n  | JSX.Element\n  | JSX.Element[]\n  | string\n  | string[]\n  | React.ReactChild\n  | React.ReactChild[];\n\ninterface ILayout {\n  children?: TChildren;\n}\n\nfunction Layout({ children }: ILayout): JSX.Element {\n  return (\n    <>\n      <Header />\n      <main className=\"layout\">\n        <div className=\"layout__container\">\n          <div className=\"layout__content\">\n            {children}\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </>\n  );\n}\n\nexport default Layout;\n","import { useDispatch } from 'react-redux';\n\nimport { rdxSlotStartAsync } from 'application/redux';\n\nfunction Welcome(): JSX.Element { // TODO:\n  const dispatch = useDispatch();\n\n  const buttonStartHandler = (): void => {\n    dispatch(rdxSlotStartAsync());\n  };\n\n  return (\n    <div>\n      <h1>Welcome... (TODO)</h1>\n      <br />\n      <br />\n      <br />\n      <button type=\"button\" onClick={buttonStartHandler}>\n        <span>{'START GAME (TODO)'}</span>\n      </button>\n    </div>\n  );\n}\n\nexport default Welcome;\n","enum EReelsPositions {\n  LEFT = 0,\n  CENTER = 1,\n  RIGHT = 2,\n}\n\nconst mapReelsPositions = new Map<number, string>([\n  [EReelsPositions.LEFT, `left`],\n  [EReelsPositions.CENTER, `center`],\n  [EReelsPositions.RIGHT, `right`],\n]);\n\nconst getReelsPositionsDesc = (enumeration: number): string => {\n  return mapReelsPositions.get(enumeration) || '';\n};\n\nexport {\n  EReelsPositions,\n  getReelsPositionsDesc,\n};\n","import { EReelsPositions, getReelsPositionsDesc } from 'application/enumerations/reels';\nimport { TReduxSlotData, IReduxSlotVisibleIndexes } from 'application/redux';\n\ninterface IReel {\n  classNamePrefix: string;\n  slotData: TReduxSlotData;\n  refReel: React.RefObject<HTMLDivElement>;\n  refsSymbol: React.MutableRefObject<(HTMLDivElement | null)[]>;\n  achievedIndexes: IReduxSlotVisibleIndexes;\n  position: EReelsPositions,\n  hasEnded: boolean;\n}\n\nfunction Reel({ classNamePrefix, slotData, refReel, refsSymbol, achievedIndexes, position, hasEnded }: IReel): JSX.Element {\n  return (\n    <div className={`${classNamePrefix}__reel ${classNamePrefix}__reel--${getReelsPositionsDesc(position)}`} ref={refReel}>\n      {slotData?.map((symbol: string, index: number) => {\n        const classNameTop = hasEnded && achievedIndexes.top === index ? 'state--top' : '';\n        const classNameCenter = hasEnded && achievedIndexes.center === index ? 'state--center' : '';\n        const classNameBottom = hasEnded && achievedIndexes.bottom === index ? 'state--bottom' : '';\n\n        return (\n          <div\n            key={index}\n            ref={_this => refsSymbol.current[index] = _this}\n            data-achievement={symbol}\n            className={[`${classNamePrefix}__reel__symbol`, classNameTop, classNameCenter, classNameBottom].join(' ').trim()}\n          >\n            <span>{`${symbol} - ${index + 1}`}</span>\n          </div>\n        );\n      })}\n    </div>\n  );\n\n}\n\nexport default Reel;\n","import { useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { elementScrollToWithDurationAsync, generateRandomNumberBetween } from 'application/helpers';\nimport { EReelsPositions } from 'application/enumerations/reels';\nimport {\n  rdxSlotSelector,\n  rdxSlotRestartAsync,\n  rdxSlotIsSpinningAsync,\n  rdxSlotHasEndedAsync,\n  rdxSlotLuckyLinesAsync,\n  rdxSlotLuckyNumbersAsync,\n  rdxSlotAchievementsAsync,\n} from 'application/redux';\n\nimport Reel from 'presentation/components/game/partials/reel/Reel';\n\nimport 'presentation/components/game/partials/machine/Machine.scss';\n\nfunction Machine(): JSX.Element { // TODO:\n  const dispatch = useDispatch();\n\n  const {\n    stateSlotIsSpinning,\n    stateSlotSpinningHasEnded,\n    stateSlotData,\n    stateSlotLuckyLines,\n    stateSlotLuckyNumbers,\n    stateSlotAchievements,\n  } = useSelector(rdxSlotSelector);\n\n  const refReelLeft = useRef<HTMLDivElement>(null);\n  const refReelCenter = useRef<HTMLDivElement>(null);\n  const refReelRight = useRef<HTMLDivElement>(null);\n  const refsSymbolsLeft = useRef<(HTMLDivElement | null)[]>([]);\n  const refsSymbolsCenter = useRef<(HTMLDivElement | null)[]>([]);\n  const refsSymbolsRight = useRef<(HTMLDivElement | null)[]>([]);\n\n\n  const spinHandlerAsync = async (luckyNum1: number, luckyNum2: number, luckyNum3: number): Promise<void> => {\n    dispatch(rdxSlotRestartAsync());\n    refReelLeft.current?.scrollTo({ top: 0 });\n    refReelCenter.current?.scrollTo({ top: 0 });\n    refReelRight.current?.scrollTo({ top: 0 });\n\n    const symbolLeft = refsSymbolsLeft.current[luckyNum1 - 1];\n    const symbolCenter = refsSymbolsCenter.current[luckyNum2 - 1];\n    const symbolRight = refsSymbolsRight.current[luckyNum3 - 1];\n    const reelLeft = refReelLeft.current;\n    const reelCenter = refReelCenter.current;\n    const reelRight = refReelRight.current;\n\n    if (symbolLeft && symbolCenter && symbolRight && reelLeft && reelCenter && reelRight) {\n      dispatch(rdxSlotIsSpinningAsync());\n\n      const lines = {\n        // left: generateRandomNumberBetween(0, 2),\n        // center: generateRandomNumberBetween(0, 2),\n        // right: generateRandomNumberBetween(0, 2),\n        left: 1,\n        center: 1,\n        right: 1,\n      };\n      dispatch(rdxSlotLuckyLinesAsync(lines));\n\n\n      const numbers = {\n        left: generateRandomNumberBetween(6, 94),\n        center: generateRandomNumberBetween(6, 94),\n        right: generateRandomNumberBetween(6, 94),\n      };\n      dispatch(rdxSlotLuckyNumbersAsync(numbers));\n\n\n      const positionLeft = (symbolLeft.offsetTop - reelLeft.offsetTop) - (stateSlotLuckyLines.left * symbolLeft.offsetHeight);\n      const positionCenter = (symbolCenter.offsetTop - reelCenter.offsetTop) - (stateSlotLuckyLines.center * symbolCenter.offsetHeight);\n      const positionRight = (symbolRight.offsetTop - reelRight.offsetTop) - (stateSlotLuckyLines.right * symbolRight.offsetHeight);\n      await Promise.all([\n        elementScrollToWithDurationAsync(reelLeft, positionLeft, 1000), // TODO: duration num will be const\n        elementScrollToWithDurationAsync(reelCenter, positionCenter, 1500), // TODO: duration num will be const\n        elementScrollToWithDurationAsync(reelRight, positionRight, 2000), // TODO: duration num will be const\n      ]);\n\n      const topLineSymbol1 = refsSymbolsLeft.current[luckyNum1 - stateSlotLuckyLines.left - 1];\n      const topLineSymbol2 = refsSymbolsCenter.current[luckyNum2 - stateSlotLuckyLines.center - 1];\n      const topLineSymbol3 = refsSymbolsRight.current[luckyNum3 - stateSlotLuckyLines.right - 1];\n      const centerLineSymbol1 = refsSymbolsLeft.current[luckyNum1 - stateSlotLuckyLines.left];\n      const centerLineSymbol2 = refsSymbolsCenter.current[luckyNum2 - stateSlotLuckyLines.center];\n      const centerLineSymbol3 = refsSymbolsRight.current[luckyNum3 - stateSlotLuckyLines.right];\n      const bottomLineSymbol1 = refsSymbolsLeft.current[luckyNum1 - stateSlotLuckyLines.left + 1];\n      const bottomLineSymbol2 = refsSymbolsCenter.current[luckyNum2 - stateSlotLuckyLines.center + 1];\n      const bottomLineSymbol3 = refsSymbolsRight.current[luckyNum3 - stateSlotLuckyLines.right + 1];\n      const achievements = {\n        lineTopAchievements: topLineSymbol1?.dataset.achievement + ' * ' + topLineSymbol2?.dataset.achievement + ' * ' + topLineSymbol3?.dataset.achievement,\n        lineCenterAchievements: centerLineSymbol1?.dataset.achievement + ' * ' + centerLineSymbol2?.dataset.achievement + ' * ' + centerLineSymbol3?.dataset.achievement,\n        lineBottomAchievements: bottomLineSymbol1?.dataset.achievement + ' * ' + bottomLineSymbol2?.dataset.achievement + ' * ' + bottomLineSymbol3?.dataset.achievement,\n        reelLeftVisibleIndexes: {\n          top: (luckyNum1 - stateSlotLuckyLines.left - 1),\n          center: (luckyNum1 - stateSlotLuckyLines.left),\n          bottom: (luckyNum1 - stateSlotLuckyLines.left + 1),\n        },\n        reelCenterVisibleIndexes: {\n          top: (luckyNum2 - stateSlotLuckyLines.center - 1),\n          center: (luckyNum2 - stateSlotLuckyLines.center),\n          bottom: (luckyNum2 - stateSlotLuckyLines.center + 1),\n        },\n        reelRightVisibleIndexes: {\n          top: (luckyNum3 - stateSlotLuckyLines.right - 1),\n          center: (luckyNum3 - stateSlotLuckyLines.right),\n          bottom: (luckyNum3 - stateSlotLuckyLines.right + 1),\n        },\n      };\n      dispatch(rdxSlotAchievementsAsync(achievements));\n\n      dispatch(rdxSlotHasEndedAsync(true));\n    }\n  };\n\n\n  return (\n    <>\n      <button type=\"button\" className=\"app__button\" onClick={() => spinHandlerAsync(stateSlotLuckyNumbers.left, stateSlotLuckyNumbers.center, stateSlotLuckyNumbers.right)}>\n        <span>TEST BUTTON ({`${stateSlotLuckyNumbers.left}, ${stateSlotLuckyNumbers.center}, ${stateSlotLuckyNumbers.right}`})</span>\n      </button>\n\n      <br />\n      <br />\n\n      <div className={`machine ${stateSlotIsSpinning ? 'machine--spinning' : ''}`}>\n        <Reel\n          classNamePrefix={'machine'}\n          slotData={stateSlotData}\n          refReel={refReelLeft}\n          refsSymbol={refsSymbolsLeft}\n          achievedIndexes={stateSlotAchievements.reelLeftVisibleIndexes}\n          position={EReelsPositions.LEFT}\n          hasEnded={stateSlotSpinningHasEnded}\n        />\n        <Reel\n          classNamePrefix={'machine'}\n          slotData={stateSlotData}\n          refReel={refReelCenter}\n          refsSymbol={refsSymbolsCenter}\n          achievedIndexes={stateSlotAchievements.reelCenterVisibleIndexes}\n          position={EReelsPositions.CENTER}\n          hasEnded={stateSlotSpinningHasEnded}\n        />\n        <Reel\n          classNamePrefix={'machine'}\n          slotData={stateSlotData}\n          refReel={refReelRight}\n          refsSymbol={refsSymbolsRight}\n          achievedIndexes={stateSlotAchievements.reelRightVisibleIndexes}\n          position={EReelsPositions.RIGHT}\n          hasEnded={stateSlotSpinningHasEnded}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default Machine;\n","\nimport Machine from 'presentation/components/game/partials/machine/Machine';\n\nimport 'presentation/components/game/Game.scss';\n\nfunction Game(): JSX.Element { // TODO:\n  return (\n    <div className=\"game\">\n      <Machine />\n    </div>\n  );\n}\n\nexport default Game;\n","import { useSelector } from 'react-redux';\n\nimport { rdxSlotSelector } from 'application/redux';\n\nimport Layout from 'presentation/components/layout/Layout';\nimport Welcome from 'presentation/components/welcome/Welcome';\nimport Game from 'presentation/components/game/Game';\n\nfunction App(): JSX.Element {\n  const { stateSlotIsWelcome } = useSelector(rdxSlotSelector);\n\n  return (\n    <Layout>\n      {stateSlotIsWelcome && <Welcome />}\n      {!stateSlotIsWelcome && <Game />}\n    </Layout>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { hydrate, render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport { appReducers } from 'application/redux/reducers';\n\nimport App from 'presentation/App';\n\nimport 'presentation/styles/global.scss';\n\nconst SlotMachineApp = () => {\n  const store = createStore(appReducers, composeWithDevTools(applyMiddleware(thunk)));\n  return (\n    <Provider store={store}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </Provider>\n  );\n};\n\nconst slotMachineRootElement = window.document.getElementById('SlotMachineApp');\nif (slotMachineRootElement?.hasChildNodes()) {\n  hydrate(<SlotMachineApp />, slotMachineRootElement);\n} else {\n  render(<SlotMachineApp />, slotMachineRootElement);\n}\n"],"sourceRoot":""}