{"version":3,"sources":["application/helpers/index.ts","application/redux/actions/slotActions.ts","application/redux/reducers/slotReducer.ts","application/redux/reducers/index.ts","presentation/components/header/Header.tsx","presentation/components/footer/Footer.tsx","presentation/components/layout/Layout.tsx","presentation/components/welcome/Welcome.tsx","presentation/App.tsx","index.tsx"],"names":["generateRandomNumberBetween","from","to","Math","floor","random","rdxSlotActionTypes","rdxSlotSelector","state","slotReducer","slotInitialState","stateSlotIsWelcome","stateSlotIsSpinning","stateSlotSpinningHasEnded","stateSlotData","Array","fill","flat","stateSlotAchievements","lineTopAchievements","lineCenterAchievements","lineBottomAchievements","reelLeftVisibleIndexes","top","center","bottom","reelCenterVisibleIndexes","reelRightVisibleIndexes","stateSlotLuckyLines","left","right","stateSlotLuckyNumbers","appReducers","combineReducers","action","type","actionIsSpinning","actionHasEnded","actionLuckyLines","actionLuckyNumbers","actionAchievements","Header","className","Footer","Layout","children","Welcome","dispatch","useDispatch","onClick","a","App","useSelector","SlotMachineApp","store","createStore","composeWithDevTools","applyMiddleware","thunk","StrictMode","slotMachineRootElement","window","document","getElementById","hasChildNodes","hydrate","render"],"mappings":"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","file":"static/js/main.d3258273.chunk.js","sourcesContent":["const addSomeDelayAsync = (milliseconds?: number): Promise<void> => new Promise(resolve => setTimeout(() => { resolve(); }, milliseconds || 1000));\n\nconst elementScrollToWithDurationAsync = async (element: HTMLElement, to: number, duration: number): Promise<void> => new Promise(resolve => {\n  const start = element.scrollTop;\n  const diff = to - start;\n  const increment = 10;\n  let currentTime = 0;\n\n  const easeInOutQuad = (crrntTm: number, strt: number, dff: number, drtn: number): number => {\n    crrntTm /= drtn / 2;\n    if (crrntTm < 1) {\n      return dff / 2 * crrntTm * crrntTm + strt;\n    }\n    crrntTm--;\n    return -dff / 2 * (crrntTm * (crrntTm - 2) - 1) + strt;\n  };\n\n  const animatedScroll = () => {\n    currentTime += increment;\n    const currentPosition = easeInOutQuad(currentTime, start, diff, duration);\n    element.scrollTop = currentPosition;\n    if (currentTime < duration) {\n      const delay = setTimeout(() => {\n        animatedScroll();\n        clearTimeout(delay);\n      }, increment);\n    } else {\n      resolve();\n    }\n  };\n\n  animatedScroll();\n});\n\nconst generateRandomNumberBetween = (from: number, to: number): number => Math.floor(Math.random() * (to + 1)) + from;\n\nexport {\n  addSomeDelayAsync,\n  elementScrollToWithDurationAsync,\n  generateRandomNumberBetween,\n};\n","import { addSomeDelayAsync } from 'application/helpers';\n\nimport {\n  Dispatch,\n  IReduxSlotDispatch,\n  IReduxSlotState,\n  IReduxSlotLuckyLines,\n  IReduxSlotLuckyNumbers,\n  IReduxSlotAchievements,\n  IReduxSlotActionTypes,\n  IReduxSlotActions,\n} from 'application/redux';\n\nconst rdxSlotActionTypes: IReduxSlotActionTypes = {\n  SLOT_WELLCOME: 'SLOT_START',\n  SLOT_START: 'SLOT_START',\n  SLOT_RESTART: 'SLOT_RESTART',\n  SLOT_ISSPINNING: 'SLOT_ISSPINNING',\n  SLOT_SPINNINGHASENDED: 'SLOT_SPINNINGHASENDED',\n  SLOT_LUCKYLINES: 'SLOT_LUCKYLINES',\n  SLOT_LUCKYNUMBERS: 'SLOT_LUCKYNUMBERS',\n  SLOT_ACHIEVEMENTS: 'SLOT_ACHIEVEMENTS',\n};\n\nconst slotWelcome = (): IReduxSlotActions => ({\n  type: rdxSlotActionTypes.SLOT_WELLCOME,\n});\n\nconst slotStart = (): IReduxSlotActions => ({\n  type: rdxSlotActionTypes.SLOT_RESTART,\n});\n\nconst slotRestart = (): IReduxSlotActions => ({\n  type: rdxSlotActionTypes.SLOT_RESTART,\n});\n\nconst slotIsSpinning = (toggle: boolean): IReduxSlotActions => ({\n  type: rdxSlotActionTypes.SLOT_ISSPINNING,\n  actionIsSpinning: toggle,\n});\n\nconst slotHasEnded = (toggle: boolean): IReduxSlotActions => ({\n  type: rdxSlotActionTypes.SLOT_SPINNINGHASENDED,\n  actionHasEnded: toggle,\n});\n\nconst slotLuckyLines = (lines: IReduxSlotLuckyLines): IReduxSlotActions => ({\n  type: rdxSlotActionTypes.SLOT_LUCKYLINES,\n  actionLuckyLines: lines,\n});\n\nconst slotLuckyNumbers = (numbers: IReduxSlotLuckyNumbers): IReduxSlotActions => ({\n  type: rdxSlotActionTypes.SLOT_LUCKYNUMBERS,\n  actionLuckyNumbers: numbers,\n});\n\nconst slotAchievements = (achievements: IReduxSlotAchievements): IReduxSlotActions => ({\n  type: rdxSlotActionTypes.SLOT_ACHIEVEMENTS,\n  actionAchievements: achievements,\n});\n\n\nconst rdxSlotWelcomeAsync = (): IReduxSlotDispatch => async (dispatch: Dispatch<IReduxSlotActions>) => {\n  dispatch(slotWelcome());\n};\n\nconst rdxSlotStartAsync = (): IReduxSlotDispatch => async (dispatch: Dispatch<IReduxSlotActions>) => {\n  dispatch(slotStart());\n};\n\nconst rdxSlotRestartAsync = (): IReduxSlotDispatch => async (dispatch: Dispatch<IReduxSlotActions>) => {\n  dispatch(slotRestart());\n};\n\nconst rdxSlotIsSpinningAsync = (): IReduxSlotDispatch => async (dispatch: Dispatch<IReduxSlotActions>) => {\n  dispatch(slotIsSpinning(true));\n  await addSomeDelayAsync(1500);\n  dispatch(slotIsSpinning(false));\n};\n\nconst rdxSlotHasEndedAsync = (toggle: boolean): IReduxSlotDispatch => async (dispatch: Dispatch<IReduxSlotActions>) => {\n  dispatch(slotHasEnded(toggle));\n};\n\nconst rdxSlotLuckyLinesAsync = (lines: IReduxSlotLuckyLines): IReduxSlotDispatch => async (dispatch: Dispatch<IReduxSlotActions>) => {\n  dispatch(slotLuckyLines(lines));\n};\n\nconst rdxSlotLuckyNumbersAsync = (numbers: IReduxSlotLuckyNumbers): IReduxSlotDispatch => async (dispatch: Dispatch<IReduxSlotActions>) => {\n  dispatch(slotLuckyNumbers(numbers));\n};\n\nconst rdxSlotAchievementsAsync = (achievements: IReduxSlotAchievements): IReduxSlotDispatch => async (dispatch: Dispatch<IReduxSlotActions>) => {\n  dispatch(slotAchievements(achievements));\n};\n\nconst rdxSlotSelector = (state: IReduxSlotState): IReduxSlotState => state.slotReducer;\n\nexport {\n  rdxSlotActionTypes,\n  rdxSlotWelcomeAsync,\n  rdxSlotStartAsync,\n  rdxSlotRestartAsync,\n  rdxSlotIsSpinningAsync,\n  rdxSlotHasEndedAsync,\n  rdxSlotLuckyLinesAsync,\n  rdxSlotLuckyNumbersAsync,\n  rdxSlotAchievementsAsync,\n  rdxSlotSelector,\n};\n","\nimport { generateRandomNumberBetween } from 'application/helpers';\n\nimport { IReduxSlotActions, IReduxSlotState, rdxSlotActionTypes } from 'application/redux';\n\nconst slotInitialState: IReduxSlotState = {\n  stateSlotIsWelcome: true,\n  stateSlotIsSpinning: false,\n  stateSlotSpinningHasEnded: false,\n  stateSlotData: Array(20).fill(['symbol1', 'symbol2', 'symbol3', 'symbol4', 'symbol5']).flat(), // TODO:\n  stateSlotAchievements: {\n    lineTopAchievements: '',\n    lineCenterAchievements: '',\n    lineBottomAchievements: '',\n    reelLeftVisibleIndexes: {\n      top: 0,\n      center: 0,\n      bottom: 0,\n    },\n    reelCenterVisibleIndexes: {\n      top: 0,\n      center: 0,\n      bottom: 0,\n    },\n    reelRightVisibleIndexes: {\n      top: 0,\n      center: 0,\n      bottom: 0,\n    },\n  },\n  stateSlotLuckyLines: {\n    // TODO: will be enum => 0 => top || random\n    // TODO: will be enum => 1 => center || random\n    // TODO: will be enum => 2 => bottom || random\n    // left: generateRandomNumberBetween(0, 2),\n    // center: generateRandomNumberBetween(0, 2),\n    // right: generateRandomNumberBetween(0, 2),\n    left: 1,\n    center: 1,\n    right: 1,\n  },\n  stateSlotLuckyNumbers: {\n    left: generateRandomNumberBetween(6, 94),\n    center: generateRandomNumberBetween(6, 94),\n    right: generateRandomNumberBetween(6, 94),\n  },\n};\n\n/* eslint-disable indent */\nconst slotReducer = (state = slotInitialState, action: IReduxSlotActions): IReduxSlotState => {\n  switch (action.type) {\n    case rdxSlotActionTypes.SLOT_WELLCOME:\n      return slotInitialState;\n\n    case rdxSlotActionTypes.SLOT_START:\n      return {\n        ...slotInitialState,\n        stateSlotIsWelcome: false,\n      };\n\n    case rdxSlotActionTypes.SLOT_RESTART:\n      return {\n        ...slotInitialState,\n        stateSlotIsWelcome: false,\n      };\n\n    case rdxSlotActionTypes.SLOT_ISSPINNING:\n      return {\n        ...state,\n        stateSlotIsSpinning: action.actionIsSpinning === true,\n      };\n\n    case rdxSlotActionTypes.SLOT_SPINNINGHASENDED:\n      return {\n        ...state,\n        stateSlotSpinningHasEnded: action.actionHasEnded === true,\n      };\n\n    case rdxSlotActionTypes.SLOT_LUCKYLINES:\n      return {\n        ...state,\n        stateSlotLuckyLines: action.actionLuckyLines || slotInitialState.stateSlotLuckyLines,\n      };\n\n    case rdxSlotActionTypes.SLOT_LUCKYNUMBERS:\n      return {\n        ...state,\n        stateSlotLuckyNumbers: action.actionLuckyNumbers || slotInitialState.stateSlotLuckyNumbers,\n      };\n\n    case rdxSlotActionTypes.SLOT_ACHIEVEMENTS:\n      return {\n        ...state,\n        stateSlotAchievements: action.actionAchievements || slotInitialState.stateSlotAchievements,\n      };\n\n    default:\n      return state;\n  }\n};\n/* eslint-enable indent */\n\nexport {\n  slotInitialState,\n  slotReducer,\n};\n","import { combineReducers } from 'redux';\n\nimport { slotReducer } from 'application/redux/reducers/slotReducer';\n\nconst appReducers = combineReducers({\n  slotReducer,\n});\n\nexport { appReducers };\n","import 'presentation/components/header/Header.scss';\n\nfunction Header(): JSX.Element {\n  return (\n    <header className=\"header\">\n      <div className=\"header__container\">\n        <h1>HEADER</h1>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import 'presentation/components/footer/Footer.scss';\n\nfunction Footer(): JSX.Element {\n  return (\n    <footer className=\"footer\">\n      <div className=\"footer__container\">\n        <div className=\"footer__copyright\">\n          <p className=\"footer__copyright__text\">copyright text</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import Header from 'presentation/components/header/Header';\nimport Footer from 'presentation/components/footer/Footer';\n\nimport 'presentation/components/layout/Layout.scss';\n\ntype TChildren = React.ReactNode\n  | JSX.Element\n  | JSX.Element[]\n  | string\n  | string[]\n  | React.ReactChild\n  | React.ReactChild[];\n\ninterface ILayout {\n  children?: TChildren;\n}\n\nfunction Layout({ children }: ILayout): JSX.Element {\n  return (\n    <>\n      <Header />\n      <main className=\"layout\">\n        <div className=\"layout__container\">\n          <div className=\"layout__content\">\n            {children}\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </>\n  );\n}\n\nexport default Layout;\n","import { useDispatch } from 'react-redux';\n\nimport { rdxSlotStartAsync } from 'application/redux';\n\nfunction Welcome(): JSX.Element { // TODO:\n  const dispatch = useDispatch();\n\n  const buttonStartHandler = (): void => {\n    dispatch(rdxSlotStartAsync());\n  };\n\n  return (\n    <div>\n      <h1>Welcome... (TODO)</h1>\n      <br />\n      <br />\n      <br />\n      <button type=\"button\" onClick={buttonStartHandler}>\n        <span>{'START GAME (TODO)'}</span>\n      </button>\n    </div>\n  );\n}\n\nexport default Welcome;\n","import { useSelector } from 'react-redux';\n\nimport { rdxSlotSelector } from 'application/redux';\n\nimport Layout from 'presentation/components/layout/Layout';\nimport Welcome from 'presentation/components/welcome/Welcome';\n\nfunction App(): JSX.Element {\n  const { stateSlotIsWelcome } = useSelector(rdxSlotSelector);\n\n  return (\n    <Layout>\n      {stateSlotIsWelcome && <Welcome />}\n      {!stateSlotIsWelcome && <h1>Game</h1>}\n    </Layout>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { hydrate, render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport { appReducers } from 'application/redux/reducers';\n\nimport App from 'presentation/App';\n\nimport 'presentation/styles/global.scss';\n\nconst SlotMachineApp = () => {\n  const store = createStore(appReducers, composeWithDevTools(applyMiddleware(thunk)));\n  return (\n    <Provider store={store}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </Provider>\n  );\n};\n\nconst slotMachineRootElement = window.document.getElementById('SlotMachineApp');\nif (slotMachineRootElement?.hasChildNodes()) {\n  hydrate(<SlotMachineApp />, slotMachineRootElement);\n} else {\n  render(<SlotMachineApp />, slotMachineRootElement);\n}\n"],"sourceRoot":""}